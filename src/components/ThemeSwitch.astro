---
import LightBulb from 'icons/LightBulb.astro';
import { Theme } from 'themes';

export interface Props {
  initialTheme: Theme | null;
}

const { initialTheme } = Astro.props;
const initialTitle = `${
  initialTheme === Theme.DARK ? Theme.LIGHT : Theme.DARK
} mode`;
---
<button id="theme-switch" data-theme={initialTheme} title={initialTitle} transition:persist>
  <LightBulb class="emoji" />
</button>
<script>
  import { Theme } from '../themes';
  import { buildCookie } from '../cookies';

  const themeSwitch = document.getElementById('theme-switch');

  const setTheme = (newTheme: string, shouldSetCookie: boolean = false) => {
    const oldTheme = newTheme === Theme.DARK ? Theme.LIGHT : Theme.DARK;
    document.body.classList.remove(`${oldTheme}-theme`);
    document.body.classList.add(`${newTheme}-theme`);
    // Button should be opposite theme the theme we just switched away from
    themeSwitch.title = `${oldTheme} mode`;
    themeSwitch.dataset.theme = newTheme;

    if (newTheme && shouldSetCookie) {
      document.cookie = buildCookie('theme', newTheme);
    }
  };

  // If no theme has been set, use browser preference
  if (!themeSwitch.dataset.theme) {
    const mediaPrefersDarkMode = window.matchMedia(
      '(prefers-color-scheme: dark)',
    ).matches;
    const browserPreferredTheme = mediaPrefersDarkMode
      ? Theme.DARK
      : Theme.LIGHT;
    setTheme(browserPreferredTheme, false);
  }

  themeSwitch.addEventListener('click', () => {
    const { theme } = themeSwitch.dataset;
    const newTheme = theme === Theme.DARK ? Theme.LIGHT : Theme.DARK;
    setTheme(newTheme, true);
  });
</script>
